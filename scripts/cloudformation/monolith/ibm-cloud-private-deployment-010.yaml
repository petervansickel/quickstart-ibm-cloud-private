###############################################################################
# Licensed Material - Property of IBM
# 5724-I63, 5724-H88, (C) Copyright IBM Corp. 2018 - All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
# DISCLAIMER:
# The following source code is sample code created by IBM Corporation.
# This sample code is provided to you solely for the purpose of assisting you
# in the  use of  the product. The code is provided 'AS IS', without warranty or
# condition of any kind. IBM shall not be liable for any damages arising out of
# your use of the sample code, even if IBM has been advised of the possibility
# of such damages.
###############################################################################
#
# NOTES:
#  Each ICP node has an ICPRole tag that is used by the bootstrapping
#  scripts to determine the role of the node.  The following values
#  for the ICPRole tag and accepted (case insensitive):
#    Master, Worker, Proxy, Management, VA, etcd
#
---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys an IBM Cloud Private stack.
  **WARNING** This template creates EC2 instances and related resources. You
  will be billed for the AWS resources used if you create a stack from this
  template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Deployment Parameters
        Parameters:
          - VPCName
          - ResourceOwner
          - KeyName

      - Label:
          default: Deployment Control Parameters
        Parameters:
          - UsePrivateRegistry
          - LoadICPImagesLocally

      - Label:
          default: IBM Cloud Private Configuration Parameters
        Parameters:
          - ClusterCIDR
          - ServiceCIDR

      - Label:
          default: Deployment Artifact Bucket Parameters
        Parameters:
          - ICPArchiveBucketName
          - ICPArchivePath
          - DockerInstallBinaryPath
          - ICPScriptBucketName
          - ICPBootNodeScriptPackagePath
          - ICPClusterNodeScriptPackagePath

      - Label:
          default: EC2 Instance Parameters
        Parameters:
          - BootInstanceType
          - MasterInstanceType
          - ManagementInstanceType
          - ProxyInstanceType
          - VulnerabilityAdvisorInstanceType
          - WorkerInstanceType

      - Label:
          default: IBM Cloud Private Cluster Parameters
        Parameters:
          - MasterNodeCount
          - ManagementNodeCount
          - ProxyNodeCount
          - VulnerabilityAdvisorNodeCount
          - WorkerNodeCount

      - Label:
          default: Network Parameters
        Parameters:
          - ExternalSSHLocation
          - ExternalICPAdminLocation
          - ExternalApplicationLocation
          - ClusterSubNetCidr

    ParameterLabels:
      VPCName:
        default: Virtual Private Cloud Name
      ResourceOwner:
        default: Resource Owner
      KeyName:
        default: EC2 Key Pair Name
      UsePrivateRegistry:
        default: Use Private Registry
      LoadICPImagesLocally:
        default: Load ICP Images Locally
      ICPArchiveBucketName:
        default: ICP Archive Bucket Name
      ICPArchivePath:
        default: ICP Archive Path
      DockerInstallBinaryPath:
        default: Docker Install Binary Path
      ICPScriptBucketName:
        default: ICP Script Bucket Name
      ICPBootNodeScriptPackagePath:
        default: ICP Boot Node Script Package Path
      ICPClusterNodeScriptPackagePath:
        default: ICP Cluster Node Script Package Path
      BootInstanceType:
        default: Boot Node EC2 Instance Type
      MasterInstanceType:
        default: Master Node EC2 Instance Type
      ManagementInstanceType:
        default: Management Node EC2 Instance Type
      ProxyInstanceType:
        default: Proxy Node EC2 Instance Type
      VulnerabilityAdvisorInstanceType:
        default: Vulnerability Advisor EC2 Instance Type
      WorkerInstanceType:
        default: Worker Node EC2 Instance Type
      MasterNodeCount:
        default: Master Node Count
      ManagementNodeCount:
        default: Management Node Count
      ProxyNodeCount:
        default: Proxy Node Count
      VulnerabilityAdvisorNodeCount:
        default: Vulnerability Node Count
      WorkerNodeCount:
        default: Worker Node Count
      ExternalSSHLocation:
        default: External SSH Location
      ExternalICPAdminLocation:
        default: External ICP Admin Location
      ExternalApplicationLocation:
        default: External Application Location
      ClusterSubnetCidr:
        default: Cluster Subnet CIDR
      ClusterCIDR:
        default: ICP Cluster Network CIDR
      ServiceCIDR:
        default: ICP Service Network CIDR

Parameters:

  VPCName:
    Description: The name of the deployed Virtual Private Cloud
    Type: String
    Default: IBMCloudPrivateVPC

  ResourceOwner:
    Description: >-
      Value for the owner tag for the deployed resource associated with the stack.
    Type: String

  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  UsePrivateRegstry:
    Description: >-
      Configure a private Docker registry on the Boot node. Load the private registry with the IBM Cloud Private images. Install ICP using the private registry. (Not Available Yet)
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

  LoadICPImagesLocally:
    Description: >-
      When true, load the IBM Cloud Private images into the local Docker registry on each node using an archive extraction command run directly on each node.  When false, load the ICP images using an Ansible playbook launched from the Boot node. This variable is used for experiments in comparing different installation techniquies.
    Type: String
    AllowedValues:
      - true
      - false
    Default: true

  ICPArchiveBucketName:
    Description: >-
      The name of the S3 bucket where the ICP install archive and Docker install binary is located.
    Type: String

  ICPArchivePath:
    Description: >-
      The path to the ICP install archive in the ICP bucket.
    Type: String

  DockerInstallBinaryPath:
    Description: >-
      The path to the Docker install binary in the ICP bucket.
    Type: String

  ICPScriptBucketName:
    Description: >-
      The name of the S3 bucket where the ICP boostrap script packages are located.
    Type: String

  ICPBootNodeScriptPackagePath:
    Description: >-
      The path in the ICP bootstrap S3 bucket to the ICP Boot node script package (zip) file.
    Type: String

  ICPClusterNodeScriptPackagePath:
    Description: >-
      The path in the ICP bootstrap S3 bucket to the ICP cluster node script package (zip) file.  Cluster nodes are master, proxy, worker, management, vulnerability advisor.
    Type: String

  BootInstanceType:
    Description: ICP boot node AWS EC2 instance type
    Type: String
    Default: m5d.xlarge
    AllowedValues:
      - t2.micro
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5d.large
      - m5d.xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  MasterInstanceType:
    Description: ICP master node AWS EC2 instance type
    Type: String
    Default: m5d.2xlarge
    AllowedValues:
      - t2.micro
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  ManagementInstanceType:
    Description: ICP management node AWS EC2 instance type
    Type: String
    Default: m5d.2xlarge
    AllowedValues:
      - t2.micro
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  ProxyInstanceType:
    Description: ICP worker node AWS EC2 instance type
    Type: String
    Default: m5d.xlarge
    AllowedValues:
      - t2.micro
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  WorkerInstanceType:
    Description: ICP worker node AWS EC2 instance type
    Type: String
    Default: m5d.xlarge
    AllowedValues:
      - t2.micro
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  MasterNodeCount:
    Description: >-
      Number of master nodes to be deployed in the ICP cluster. Must be an odd number. For a development deployment 1 is sufficient. For production deployments typically 3 or 5.
    Type: String
    Default: 1

  ProxyNodeCount:
    Description: >-
      Number of proxy nodes to be deployed in the ICP cluster. For a dev deployment 1 is sufficient. For production deployments, at least 2 and typically 3 are deployed.
    Type: String
    Default: 1

  ManagementNodeCount:
    Description: >-
      Number of management nodes to be deployed in the ICP cluster. For a dev deployment 1 is sufficient. For production deployments, at least 2 and typically 3 are deployed.  The management nodes run the resource and log monitoring monitoring components, e.g., Prometheus, Grafana and the ELK stack.
    Type: String
    Default: 1

  VulnerabilityAdvisorNodeCount:
    Description: >-
      Number of Vulnerability Advisor nodes to be deployed in the ICP cluster. Not typically deployed for a development environment. For production deployments, at least 2 and typically 3 are deployed.  The VA nodes run the resource image and container security scanning components.
    Type: String
    Default: 1

  WorkerNodeCount:
    Description: >-
      Number of worker nodes (desired capacity) to be deployed in the ICP cluster.
    Type: String
    Default: 2

  ExternalSSHLocation:
    Description: >-
      The IP address range that can be used to SSH to the EC2 instances from the external network.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ExternalICPAdminLocation:
    Description: >-
      The IP address range that can be used to get to ICP Master ELB from the external network.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ExternalApplicationLocation:
    Description: >-
      The IP address range that can be used to get to ICP Proxy ELB for access to deployed workloads on the ICP worker nodes from the external network.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ClusterSubNetCidr:
    Description: >-
      The CIDR for the ICP cluster subnet.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.0.0.0/24
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ClusterCIDR:
    Description: >-
      The CIDR for the ICP cluster overlay network.  This gets assigned to the network_cidr attribute in config.yaml.  The value provided must be a network that does not conflict with the AWS VPC network.  It also must not conflict with the ICP service overlay network.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 172.16.0.0/20
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ServiceCIDR:
    Description: >-
      The CIDR for the ICP service overlay network.  This gets assigned to the service_cluster_ip_range attribute in config.yaml.  The value provided must be a network that does not conflict with the AWS VPC network.  It also must not conflict with the ICP cluster overlay network.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 172.16.16.0/24
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  # See https://cloud-images.ubuntu.com/locator/ec2/
  # Builds needed that support HVM, Elastic Network Adapter (ENA)
  # in order to use the MD5 instance types.
  # TODO - Update EU an AP
  AWSRegionAMIEC2:
    us-east-1:
      Ubuntu16: ami-ef151d90
    us-east-2:
      Ubuntu16: ami-dad5efbf
    us-west-1:
      Ubuntu16: ami-d8b05cbb
    us-west-2:
      Ubuntu16: ami-1cc69e64
    eu-west-1:
      Ubuntu16: ami-844e0bf7
    eu-central-1:
      Ubuntu16: ami-a9a557c6
    ap-northeast-1:
      Ubuntu16: ami-d82efcb9
    ap-southeast-1:
      Ubuntu16: ami-d554f1b6
    ap-southeast-2:
      Ubuntu16: ami-0bc1f168

Resources:

  IBMCloudPrivateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      # ICP must be able to resolve hostnames
      # Using the private DNS in the VPC is more convenient that dealing with /etc/hosts
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
        - Key: Owner
          Value: !Ref ResourceOwner

  ICPClusterSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ClusterSubNetCidr
      VpcId: !Ref IBMCloudPrivateVPC
      Tags:
        - Key: Name
          Value: ICPClusterSubnet
        - Key: Owner
          Value: !Ref ResourceOwner

  ICPInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ICPInternetGateway
        - Key: Owner
          Value: !Ref ResourceOwner

  ICPGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      InternetGatewayId: !Ref ICPInternetGateway

  ICPRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC

  ICPPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - ICPSubnetRouteTableAssociation
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref ICPRouteTable
      GatewayId: !Ref ICPInternetGateway

  ICPSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ICPRouteTable
      SubnetId: !Ref ICPClusterSubnet

  ExternalSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling external SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ExternalSSHLocation
      Tags:
        - Key: Name
          Value: ExternalSSHSecurityGroup
        - Key: Owner
          Value: !Ref ResourceOwner

  InternalSSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      GroupDescription: >-
        Security group enabling internal SSH access from the boot node to the cluster member nodes
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ClusterSubNetCidr
      Tags:
        - Key: Name
          Value: InternalSSHSecurityGroup
        - Key: Owner
          Value: !Ref ResourceOwner

  ICPRootRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ICPBucketAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            # ListBucket is useful to avoid 403 errors that are really 404 errors
            Statement:
              - Action:
                  - 's3:ListBucket'
                Resource: !Sub 'arn:aws:s3:::${ICPArchiveBucketName}'
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${ICPArchiveBucketName}/*'
                Effect: Allow
              - Action:
                  - 's3:ListBucket'
                Resource: !Sub 'arn:aws:s3:::${ICPScriptBucketName}'
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${ICPScriptBucketName}/*'
                Effect: Allow

          # Needed for the bootstrap script introspection of the stack
        - PolicyName: ICPStackAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'cloudformation:ListStackResources'
                Resource: !Sub '${AWS::StackId}'
                Effect: Allow
              - Action:
                  - 'cloudformation:DescribeStacks'
                Resource: !Sub '${AWS::StackId}'
                Effect: Allow

          # Needed for the bootstrap script introspection of the stack
        - PolicyName: ICPAutoScalingAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                - 'autoscaling:DescribeAutoScalingGroups'
                Resource: '*'
                Effect: Allow

          # Needed for the bootstrap script introspection of the stack
        - PolicyName: ICPEC2AccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ec2:Describe*'
                Effect: Allow
                Resource: '*'

          # Needed for the bootstrap script and nodeinit script interaction
        - PolicyName: ICPSSMAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'ssm:PutParameter'
                  - 'ssm:GetParameter'
                Effect: Allow
                Resource: '*'

  ICPHostProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ICPRootRole

  ICPBootNode:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ICPRootRole
          buckets:
            - !Ref ICPArchiveBucketName
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          # TBD: Are configsets executed by cfn-init synchronously
          # or asynchronously?
          # Early testing is showing that the ICP installation 10 GB
          # tar ball gets downloaded from S3 in 3 minutes.  That would
          # be awesome if actually the case.
          ICPBootstrap:
            - InstallPackages
            - StackPropertiesFile
            - ICPBootstrapScripts
            - ICPInstallBinaries

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
              ansible: []
            python:
              pycryptodome: []
              boto3: []

        ICPInstallBinaries:
          files:
            /root/docker/icp-install-docker.bin:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${InstallExecutable}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, InstallExecutable: !Ref DockerInstallBinaryPath }
              mode: '000554'
              owner: root
              group: root
            /tmp/icp-install-archive.tgz:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${ArchivePath}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, ArchivePath: !Ref ICPArchivePath }
              mode: '000664'
              owner: root
              group: root

        ICPBootstrapScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3-${AWS::Region}.amazonaws.com/${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, ScriptPackagePath: !Ref ICPBootNodeScriptPackagePath }

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                STACK_NAME=${AWS::StackName}
                STACK_ID="${AWS::StackId}"
                USE_PRIVATE_REGISTRY=False

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      InstanceType: !Ref BootInstanceType
      IamInstanceProfile: !Ref ICPHostProfile
      KeyName: !Ref KeyName
      ImageId: !FindInMap
          - AWSRegionAMIEC2
          - !Ref AWS::Region
          - Ubuntu16

      NetworkInterfaces:
        - GroupSet:
            - !Ref ExternalSSHSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Ref ICPClusterSubnet

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 300

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Intall pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource ICPBootNode --configsets ICPBootstrap --region ${AWS::Region}
            pip install pyopenssl
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/bootstrap.sh --os ubuntu

      Tags:
        - Key: Name
          Value: ICPBootNode
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: ICPRole
          Value: Boot

  MasterLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - ICPGatewayAttachment
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ICPRootRole
          buckets:
            - !Ref ICPArchiveBucketName
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          ICPBootstrap:
            - InstallPackages
            - StackPropertiesFile
            - ICPNodeInitScripts
            - ICPInstallBinaries

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
            python:
              pycryptodome: []
              boto3: []

        ICPInstallBinaries:
          # The Docker install executable gets copied down to all nodes
          files:
            /root/docker/icp-install-docker.bin:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${InstallExecutable}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, InstallExecutable: !Ref DockerInstallBinaryPath }
              mode: '000554'
              owner: root
              group: root
            # It is expedient to copy the ICP install archive to all nodes.
            /tmp/icp-install-archive.tgz:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${ArchivePath}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, ArchivePath: !Ref ICPArchivePath }
              # Mode bits are getting mucked with, need to investigate
              # The result is octal 436 when this gets deployed
              mode: '000664'
              owner: root
              group: root

        ICPNodeInitScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3-${AWS::Region}.amazonaws.com/${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, ScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath }

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                STACK_NAME=${AWS::StackName}
                STACK_ID="${AWS::StackId}"

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      InstanceType: !Ref MasterInstanceType
      IamInstanceProfile: !Ref ICPHostProfile
      KeyName: !Ref KeyName
      ImageId: !FindInMap
          - AWSRegionAMIEC2
          - !Ref AWS::Region
          - Ubuntu16

      AssociatePublicIpAddress: true

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Intall pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterLaunchConfiguration --configsets ICPBootstrap --region ${AWS::Region}
            # pip install pyopenssl (so far, not needed on cluster nodes)
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/nodeinit.sh --os ubuntu

      SecurityGroups:
        - !Ref ExternalSSHSecurityGroup
        - !Ref InternalSSHSecurityGroup

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 300

  MasterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref MasterLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref ICPClusterSubnet
#      LoadBalancerNames:
#        - !Ref MasterNodeLoadBalancer
      DesiredCapacity: !Ref MasterNodeCount
      MinSize: 1
      MaxSize: 5
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
          PropagateAtLaunch: true
        - Key: ICPRole
          Value: Master
          PropagateAtLaunch: true

  WorkerLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - ICPGatewayAttachment
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ICPRootRole
          buckets:
            - !Ref ICPArchiveBucketName
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          ICPBootstrap:
            - InstallPackages
            - StackPropertiesFile
            - ICPNodeInitScripts
            - ICPInstallBinaries

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
            python:
              pycryptodome: []
              boto3: []

        ICPInstallBinaries:
          # The Docker install executable gets copied down to all nodes
          files:
            /root/docker/icp-install-docker.bin:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${InstallExecutable}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, InstallExecutable: !Ref DockerInstallBinaryPath }
              mode: '000554'
              owner: root
              group: root
            # It is expedient to copy the ICP install archive to all nodes.
            /tmp/icp-install-archive.tgz:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${ArchivePath}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, ArchivePath: !Ref ICPArchivePath }
              mode: '000664'
              owner: root
              group: root

        ICPNodeInitScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3-${AWS::Region}.amazonaws.com/${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, ScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath }

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                STACK_NAME=${AWS::StackName}
                STACK_ID="${AWS::StackId}"

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      InstanceType: !Ref WorkerInstanceType
      IamInstanceProfile: !Ref ICPHostProfile
      KeyName: !Ref KeyName
      ImageId: !FindInMap
          - AWSRegionAMIEC2
          - !Ref AWS::Region
          - Ubuntu16

      AssociatePublicIpAddress: true

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Intall pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource WorkerLaunchConfiguration --configsets ICPBootstrap --region ${AWS::Region}
            # pip install pyopenssl (so far, not needed on cluster nodes)
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/nodeinit.sh --os ubuntu

      SecurityGroups:
        - !Ref ExternalSSHSecurityGroup
        - !Ref InternalSSHSecurityGroup

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 300

  WorkerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WorkerLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref ICPClusterSubnet
      DesiredCapacity: !Ref WorkerNodeCount
      MinSize: 1
      MaxSize: 10
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
          PropagateAtLaunch: true
        - Key: ICPRole
          Value: Worker
          PropagateAtLaunch: true

  ManagementLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - ICPGatewayAttachment
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ICPRootRole
          buckets:
            - !Ref ICPArchiveBucketName
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          ICPBootstrap:
            - InstallPackages
            - StackPropertiesFile
            - ICPNodeInitScripts
            - ICPInstallBinaries

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
            python:
              pycryptodome: []
              boto3: []

        ICPInstallBinaries:
          # The Docker install executable gets copied down to all nodes
          files:
            /root/docker/icp-install-docker.bin:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${InstallExecutable}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, InstallExecutable: !Ref DockerInstallBinaryPath }
              mode: '000554'
              owner: root
              group: root
            # It is expedient to copy the ICP install images to all nodes
            /tmp/icp-install-archive.tgz:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${ArchivePath}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, ArchivePath: !Ref ICPArchivePath }
              mode: '000664'
              owner: root
              group: root

        ICPNodeInitScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3-${AWS::Region}.amazonaws.com/${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, ScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath }

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                STACK_NAME=${AWS::StackName}
                STACK_ID="${AWS::StackId}"

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      InstanceType: !Ref ManagementInstanceType
      IamInstanceProfile: !Ref ICPHostProfile
      KeyName: !Ref KeyName
      ImageId: !FindInMap
          - AWSRegionAMIEC2
          - !Ref AWS::Region
          - Ubuntu16

      AssociatePublicIpAddress: true

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Intall pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource ManagementLaunchConfiguration --configsets ICPBootstrap --region ${AWS::Region}
            # pip install pyopenssl (so far, not needed on cluster nodes)
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/nodeinit.sh --os ubuntu

      SecurityGroups:
        - !Ref ExternalSSHSecurityGroup
        - !Ref InternalSSHSecurityGroup

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500

  ManagementAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ManagementLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref ICPClusterSubnet
      DesiredCapacity: !Ref ManagementNodeCount
      MinSize: 1
      MaxSize: 3
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
          PropagateAtLaunch: true
        - Key: ICPRole
          Value: Management
          PropagateAtLaunch: true

  ProxyLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn:
      - ICPGatewayAttachment
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref ICPRootRole
          buckets:
            - !Ref ICPArchiveBucketName
            - !Ref ICPScriptBucketName

      AWS::CloudFormation::Init:
        configSets:
          ICPBootstrap:
            - InstallPackages
            - StackPropertiesFile
            - ICPNodeInitScripts
            - ICPInstallBinaries

        InstallPackages:
          packages:
            apt:
              sysstat: []
              awscli: []
            python:
              pycryptodome: []
              boto3: []

        ICPInstallBinaries:
          files:
            /root/docker/icp-install-docker.bin:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${InstallExecutable}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, InstallExecutable: !Ref DockerInstallBinaryPath }
              mode: '000554'
              owner: root
              group: root
            /tmp/icp-install-archive.tgz:
              source: !Sub
                - https://${ArchiveBucketName}.s3-${AWS::Region}.amazonaws.com/${ArchivePath}
                - { ArchiveBucketName: !Ref ICPArchiveBucketName, ArchivePath: !Ref ICPArchivePath }
              mode: '000664'
              owner: root
              group: root

        ICPNodeInitScripts:
          sources:
            /root: !Sub
             - https://${ScriptBucketName}.s3-${AWS::Region}.amazonaws.com/${ScriptPackagePath}
             - { ScriptBucketName: !Ref ICPScriptBucketName, ScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath }

        StackPropertiesFile:
          files:
            /root/mystack.props:
              content: !Sub |
                STACK_NAME=${AWS::StackName}
                STACK_ID="${AWS::StackId}"

            /root/.aws/config:
              content: !Sub |
                [default]
                region=${AWS::Region}

    Properties:
      InstanceType: !Ref ProxyInstanceType
      IamInstanceProfile: !Ref ICPHostProfile
      KeyName: !Ref KeyName
      ImageId: !FindInMap
          - AWSRegionAMIEC2
          - !Ref AWS::Region
          - Ubuntu16

      AssociatePublicIpAddress: true

      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            apt update -y
            # Intall pip, then use pip to install the aws cfn helpers
            apt install -y python-pip
            # Upgrading pip leads to an error. Don't do, pip install --upgrade pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            # Install the files and packages from the metadata
            /usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource ManagementLaunchConfiguration --configsets ICPBootstrap --region ${AWS::Region}
            # pip install pyopenssl (so far, not needed on cluster nodes)
            chmod +x /root/*.sh
            chmod +x /root/*.py
            cd /root
            /root/nodeinit.sh --os ubuntu

      SecurityGroups:
        - !Ref ExternalSSHSecurityGroup
        - !Ref InternalSSHSecurityGroup

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500

  ProxyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ProxyLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref ICPClusterSubnet
#      LoadBalancerNames:
#        - !Ref ProxyNodeLoadBalancer
      DesiredCapacity: !Ref ProxyNodeCount
      MinSize: 1
      MaxSize: 3
      Tags:
        - Key: Owner
          Value: !Ref ResourceOwner
          PropagateAtLaunch: true
        - Key: ICPRole
          Value: Proxy
          PropagateAtLaunch: true
