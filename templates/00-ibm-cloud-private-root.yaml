---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template deploys an IBM Cloud Private stack. This is the root template for a collection of nested stacks that make up the full ICP deployment. **WARNING** This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General deployment parameters
        Parameters:
          - KeyFilePath
          - KeyName
          - ResourceOwner
          - VPCName

      - Label:
          default: Deployment control parameters
        Parameters:
          - InceptionTimeout
          - InstallationTimeout
          - WhichClusterLBAddress
          - WhichProxyLBAddress

      - Label:
          default: IBM Cloud Private configuration parameters
        Parameters:
          - ClusterName
          - ClusterDomain
          - ClusterCADomain
          - ClusterCIDR
          - ExcludedMgmtServices
          - ServiceCIDR

      - Label:
          default: Deployment artifact bucket parameters
        Parameters:
          - ClusterPKIBucketName
          - ClusterPKIRootPath
          - CustomArtifactsPath
          - ICPArchiveBucketRootName
          - ICPBootNodeScriptPackagePath
          - ICPClusterNodeScriptPackagePath
          - ICPDeploymentLogsBucketName
          - QSS3BucketName
          - QSS3KeyPrefix

      - Label:
          default: EC2 instance parameters
        Parameters:
          - BootNodeInstanceType
          - MasterNodeInstanceType
          - ManagementNodeInstanceType
          - ProxyNodeInstanceType
          - VulnerabilityAdvisorNodeInstanceType
          - WorkerNodeInstanceType

      - Label:
          default: IBM Cloud Private cluster parameters
        Parameters:
          - MasterNodeCount
          - ManagementNodeCount
          - ProxyNodeCount
          - VulnerabilityAdvisorNodeCount
          - WorkerNodeCount

      - Label:
          default: Network parameters
        Parameters:
          - AvailabilityZoneCount
          - AvailabilityZones
          - ExternalApplicationLocation
          - ExternalICPAdminLocation
          - ExternalSSHLocation
          - PrivateSubnetCIDR
          - PrivateSubnets
          - PublicSubnetCIDR
          - PublicSubnets
          - VPCCIDR
          - VPCDomain

      - Label:
          default: Application workload configuration
        Parameters:
          - ApplicationDomains
          - ApplicationStorageMountPoint

    ParameterLabels:
      # Some attempt has been made to keep this list in aphabetical order
      ApplicationDomains:
        default: Application domains
      ApplicationStorageMountPoint:
        default: Application storage mount point
      AvailabilityZoneCount:
        default: Availability zone count
      AvailabilityZones:
        default: Availability zones
      BootNodeInstanceType:
        default: Boot node EC2 instance type
      ClusterCADomain:
        default: Cluster Certificate Authority domain
      ClusterCIDR:
        default: Cluster network CIDR
      ClusterDomain:
        default: Cluster domain
      ClusterName:
        default: Cluster name
      ClusterPKIBucketName:
        default: Cluster PKI bucket name
      ClusterPKIRootPath:
        default: Cluster PKI root path
      CustomArtifactsPath:
        default: Custom artifacts path
      ExcludedMgmtServices:
        default: Excluded management services
      ExternalApplicationLocation:
        default: External application location
      ExternalICPAdminLocation:
        default: External ICP admin location
      ExternalSSHLocation:
        default: External SSH location
      ICPArchiveBucketRootName:
        default: ICP archive bucket root name
      ICPBootNodeScriptPackagePath:
        default: ICP boot node script package path
      ICPClusterNodeScriptPackagePath:
        default: ICP cluster node script package path
      ICPDeploymentLogsBucketName:
        default: ICP deployment logs bucket name
      InceptionTimeout:
        default: Inception timeout
      KeyFilePath:
        default: Key file path
      KeyName:
        default: EC2 key pair name
      ManagementNodeInstanceType:
        default: Management node EC2 instance type
      MasterNodeInstanceType:
        default: Master node EC2 instance type
      MasterNodeCount:
        default: Master node count
      ManagementNodeCount:
        default: Management node count
      PrivateSubnetCIDR:
        default: Private subnet CIDR
      PrivateSubnets:
        default: Private subnets
      PublicSubnetCIDR:
        default: Public subnet CIDR
      ProxyNodeInstanceType:
        default: Proxy node EC2 instance type
      ProxyNodeCount:
        default: Proxy node count
      QSS3BucketName:
        default: QuickStart S3 bucket name
      QSS3KeyPrefix:
        default: QuickStart S3 key prefix
      ResourceOwner:
        default: Resource owner
      ServiceCIDR:
        default: ICP service network CIDR
      VPCName:
        default: Virtual private cloud name
      VulnerabilityAdvisorNodeInstanceType:
        default: Vulnerability Advisor node EC2 instance type
      VulnerabilityAdvisorNodeCount:
        default: Vulnerability Advisor node count
      WhichClusterLBAddress:
        default: Which cluster load balancer address
      WhichProxyLBAddress:
        default: Which proxy load balancer address
      WorkerNodeInstanceType:
        default: Worker node EC2 instance type
      WorkerNodeCount:
        default: Worker node count

Parameters:
  # Variables are declared in alphabetical order.
  #
  ApplicationDomains:
    Description: >-
      A list of fully qualified domain names used for applications.  Each name gets an alias record in the Route53 DNS to the Proxy node Elastic Load Balancer public DNS name. The ApplicationDomains must be consistent with the VPCDomain. The type is String to allow passing to BootNodeStack. The string is a comma delimited list.
    Type: String
    Default: myapps.example.com

  ApplicationStorageMountPoint:
    Description: >-
      Mount point for the EFS volume to be used for application shared storage. The Kubernetes EFS provisioner uses this mount point.
    Type: String
    Default: /mnt/storage

  AvailabilityZoneCount:
    Description: >-
      The number of availability zones to be used for the deployment. Keep in mind that some regions may be limited to 2 availability zones.  For a single ICP cluster to be highly available, 3 availability zones are needed to avoid a single point of failure when using 3, 5 or 7 master nodes or etcd nodes.  With less than 3 availability zones, one of the AZs will have more master nodes (or etcd nodes) than can be lost without losing a majority of the etcd instances.
    Type: Number
    Default: 1
    # For now, only 1 or 3 AZs can be used.
    AllowedValues:
      - 1
      - 3

  # NOTE: Type needs to be String or CommaDelimtedList to pass it into template stacks.
  # CommaDelimitedList leads to issues, need to revisit.
  # List<AWS::EC2::AvailabilityZone::Name> breaks stack parameters :(
  AvailabilityZones:
    Description: >-
      List of Availability Zones to use for the subnets in the VPC. Be careful to provide zones that support the instance types of the ICP cluster members. To get the names of Availability Zones available to you using the AWS CLI: aws ec2 describe-availability-zones
    Type: String

  BootNodeInstanceType:
    Description: ICP boot node AWS EC2 instance type
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  # TBD: Delete this in favor of using the ClusterName.VPCDomain for the
  # cluster CA domain.
  ClusterCADomain:
    Description: >-
      The Certificate Authority (CA) domain used for the CN in the CA key.  The default is to use the cluster name concatenated with the VPC domain.
    Type: String
    Default: mycluster.example.com

  ClusterCIDR:
    Description: >-
      The CIDR for the ICP cluster overlay network.  This gets assigned to the network_cidr attribute in config.yaml.  The value provided must be a network that does not overlap with the AWS VPC network (VPCCIDR).  It also must not overlap with the ICP service overlay network (SeviceCIDR).
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 192.168.0.0/16
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  # WARNING: A defect in ICP 3.1.0 causes MongoDB to fail to start if the
  # ClusterDomain is anything other than cluster.local.
  # Should be corrected in ICP 3.1.0 fixpack
  ClusterDomain:
    Description: >-
      The network domain of the ICP cluster overlay network.
    Type: String
    Default: cluster.local

  ClusterName:
    Description: >-
      The name of the cluster. The cluster name is combined with the VPC domain (VPCDomain) to form the cluster DNS name (ClusterDNSName). An alias record is created in Route53 that maps the ClusterDNSName to the master node load balancer DNS name.
    Type: String
    Default: mycluster

  ClusterPKIBucketName:
    Description: >-
      The S3 bucket where the cluster PKI artifacts are located. If not provided, self-signed PKI artifacts will be created and used.
    Type: String
    Default: ''

  ClusterPKIRootPath:
    Description: >-
      The path in the cluster PKI S3 bucket where the user defined PKI key and certificate files are found.  This is the key and certificate that used for the master node identity.  The CN of the key and certificate must be the same value that is provided in combination of the ClusterName and the VPCDomain. The extensions on the root path are assumed to be .key and .crt to get the key and certificate files respectively. DO NOT provide a leading / on the path value. If not provided, self-signed PKI artifacts will be created and used.
    Type: String
    Default: ''

  CustomArtifactsPath:
    Description: >-
      Path to zip archive in the ICP script bucket (QSS3BucketName) for an archive of additional artifacts, typically scripts, for ICP cluster administration extracted on the boot node in the root home directory. (Optional)
    Type: String
    Default: ''

  ExcludedMgmtServices:
    Description: >-
      Comma separated list of management services to be excluded from the IBM Cloud Private deployment.  Services that may be excluded are: service-catalog, metering, monitoring, istio, vulnerability-advisor, custom-metrics-adapter
    Type: String
    Default:
      "istio,vulnerability-advisor,custom-metrics-adapter"

  ExternalApplicationLocation:
    Description: >-
      The IP address range that can be used to get to ICP Proxy ELB for access to deployed workloads on the ICP worker nodes from the external network.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ExternalICPAdminLocation:
    Description: >-
      The IP address range that can be used to get to ICP Master ELB from the external network.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ExternalSSHLocation:
    Description: >-
      The network CIDR for IP addresses that can be used to SSH to the boot node. In single user test situations this can be a /32 CIDR.  Additional values can be added post-deployment from the AWS CloudFormation console.
    Type: String
    MinLength: 9
    MaxLength: 18
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  ICPArchiveBucketRootName:
    Description: >-
      The root name of the S3 bucket where the ICP and Docker installation artifacts are located.  For the QuickStart this gets a default (required) value of "ibm-cloud-private". The root name is used to form a full name that includes a dash (-), followed by the region name, e.g., ibm-cloud-private-us-east-1.  A bucket in each region is needed for efficiency of downloading the ICP installation artifacts to the deployed EC2 instances. The bucket name is needed to establish permission to access the ICP and Docker installation artifacts.
    Type: String
    Default: ibm-cloud-private

  ICPBootNodeScriptPackagePath:
    Description: >-
      The path in the S3 bucket to the ICP Boot node script package (zip) file. Do not include a leading / on the path value.
    Type: String
    Default: scripts/aws-icp-bootstrap.zip

  ICPClusterNodeScriptPackagePath:
    Description: >-
      The path in the S3 script bucket to the ICP cluster node script package (zip) file.
      Do not include a leading / on the path value.
      Cluster nodes are master, proxy, worker, management, vulnerability advisor.
    Type: String
    Default: scripts/aws-icp-nodeinit.zip

  ICPDeploymentLogsBucketName:
    Description: >-
      The name of the S3 bucket where ICP stack deployment logs are to be exported. The deployment logs provide a record of the boot strap scripting actions and are useful for problem determination if the deployment fails in some way.
    Type: String

  # TODO - We can likely eliminate the InceptionTimeout and use only the InstallationTimeout.
  InstallationTimeout:
    Description: >-
      The timeout (in seconds) associated with the installation and configuration of the ICP cluster, from start to finish. The InstallationTimeout must be equal or greater than the InceptionTimeout. The InstallationTimeout needs to be sufficient to allow the bootstrap installation script to complete.  See InceptionTimeout for some guidance on expected installation time.
    Type: Number
    Default: 7200

  # NOTE The version number is used to determine which insallation image tar ball to use, which Docker install binary to use, etc.
  # The version number also is used to pick up the config.yaml template to use.
  ICPVersion:
    Description: >-
      The version of ICP to be deployed.  The full version must be provided, e.g., 3.1.0.
    Type: String
    Default: 3.1.0

  InceptionTimeout:
    Description: >-
      The number of seconds to wait for the IBM Cloud Private inception container to complete the installation.  For a small HA cluster (12 nodes) the inception process typically completes the installation in about 60 minutes. The start-to-finish installation time is on the order of 75 minutes for such a cluster.  The InceptionTimeout should be smaller than the InstallationTimeout.
    Type: Number
    Default: 7200

  KeyFilePath:
    Description: >-
      Path to a file in the ICP script bucket (`QSS3BuckeName`) with public keys for administrators who need SSH access to the boot node. The public keys in the file in S3 at the KeyFilePath are copied to the `authorized_keys` file of the `ubuntu` user on the boot node. (Optional)
    Type: String
    Default: ''

  KeyName:
    Description: >-
      Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

  ManagementNodeCount:
    Description: >-
      Number of management nodes to be deployed in the ICP cluster. For a dev deployment 1 is sufficient. For production deployments, at least 2 and typically 3 are deployed.  The management nodes run the resource and log monitoring components, e.g., Prometheus, Grafana and the ELK stack.
    Type: Number
    Default: 1

  ManagementNodeInstanceType:
    Description: ICP management node AWS EC2 instance type
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  MasterNodeCount:
    Description: >-
      Number of master nodes to be deployed in the ICP cluster. Must be an odd number. For a development deployment 1 is sufficient; for production deployments 3. Currently, the master node count can only be 1 or 3.
    Type: Number
    AllowedValues:
      - 1
      - 3
    Default: 1

  MasterNodeInstanceType:
    Description: ICP master node AWS EC2 instance type
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  PrivateSubnetCIDR:
    Description: >-
      The CIDR block to be used for the private subnets.
    Type: String
    Default: 10.10.10.0/20

  PrivateSubnets:
    Description: >-
      A list of CIDR blocks to be used for the private subnets defined in 1 or 3 Availability Zones.  If there is only 1 Availability Zone, then the subnet can be the same as the PrivateSubnetCIDR.  The private subnets cannot overlap and must be within the PrivateSubnetCIDR. NOTE: CommaDelimitedList is invalid to pass into child templates.  Type is declared String, but it is intended to be a comma delimited list. Sample for 3 AZs: 10.10.10.0/24, 10.10.11.0/24, 10.10.12.0/24
    Type: String
    Default: 10.10.10.0/24

  ProxyNodeCount:
    Description: >-
      Number of Proxy nodes to be deployed in the ICP cluster. For a dev deployment 1 is sufficient. For production deployments, at least 2 and typically 3 are deployed.
    Type: Number
    Default: 1

  ProxyNodeInstanceType:
    Description: ICP Proxy node AWS EC2 instance type
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  PublicSubnetCIDR:
    Description: >-
      CIDR block used for the public subnets.  The PublicSubnetCIDR is used for defining public subnet security groups.  The PublicSubnetCIDR must be within the network defined by the VPCCIDR and not overlap with the PrivateSubnetCIDR.
    Type: String
    Default: 10.10.20.0/22

  PublicSubnets:
    Description: >-
      List of CIDRs to be used for 1 or 3 public subnets of the VPC. The number of CIDRs provided must equal the number of Availability Zones (AvailabilityZoneCount). The public subnets cannot overlap and must be within the network defined by the PublicSubnetCIDR.  NOTE: CommaDelimitedList is invalid to pass into child templates.  Type is declared String, but it is intended to be a comma delimited list. Sample for 3 AZs: 10.10.20.0/24, 10.10.21.0/24, 10.10.22.0/24
    Type: String
    Default: 10.10.20.0/24

  QSS3BucketName:
    Description: >-
      The name of the S3 bucket where the ICP boostrap script packages are located. This bucket holds all of the content of the QuickStart git repository for IBM Cloud Private which includes the script packages for the boot node and the cluster nodes.  This bucket also holds the cloud formation templates that defines the ICP infrastructure deployed in the AWS cloud.
    Type: String

  QSS3KeyPrefix:
    Description: >-
      The "context root" of the content for the ICP QuickStart.  By convention it is required that the value of the QSS3KeyPrefix is the name of the git repository associated with the IBM Cloud Private QuickStart artifacts.
    Type: String
    Default: quickstart-ibm-cloud-private

  ResourceOwner:
    Description: >-
      Value for the owner tag for the deployed resources associated with the stack.
    Type: String

  ServiceCIDR:
    Description: >-
      The CIDR for the ICP service overlay network.  This gets assigned to the service_cluster_ip_range attribute in config.yaml.  The value provided must be a network that does not overlap with the AWS VPC network (VPCCIDR).  It also must not overlap with the ICP cluster overlay network.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 172.16.0.0/24
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      Must be a valid IP CIDR range of the form x.x.x.x/x.

  VPCCIDR:
    Description: >-
      The VPC CIDR block. Must be in the form x.x.x.x/16-28
    Type: String
    # TBD: The regex in the QuickStart sample template seems to be broken
    # 10.0.0.0/16 fails the QuickStart sample regex.
    AllowedPattern: >-
      ((\d{1,3})\.){3}\d{1,3}/\d{1,2}
    ConstraintDescription: >-
      CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.10.0.0/16

  VPCDomain:
    Description: >-
      The network domain of the VPC.  The VPCDomain is used when defining the hosted zone. The ClusterName and the VPCDomain are combined to form the ClusterDNSName which is used in the ICP configuration for the cluster_CA_domain parameter in the config.yaml file.  (If PKI certificates are provided for the deployment the CN used for creating the certificates must match the match the value of ClusterName concatenated with a dot and the value of the VPCDomain.)
    Type: String
    Default: example.com

  VPCName:
    Description: The name of the deployed Virtual Private Cloud
    Type: String
    Default: IBMCloudPrivateVPC

  VulnerabilityAdvisorNodeCount:
    Description: >-
      Number of Vulnerability Advisor nodes to be deployed in the ICP cluster. Not typically deployed for a development environment. For production deployments, typically 3 are deployed. VA uses zookeeper which requires an odd number of instances for consistency voting purposes. The VA nodes run the resource image and container security scanning components. (NOTE: Not currently supported.)
    Type: Number
    AllowedValues:
      - 1
      - 3
    Default: 1

  VulnerabilityAdvisorNodeInstanceType:
    Description: ICP vulnerability advisor node AWS EC2 instance type
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - m5.2xlarge
      - m5.4xlarge
      - m5d.2xlarge
      - m5d.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  WhichClusterLBAddress:
    Description: >-
      The value to use for the cluster load balancer address.  This value is used to drive the logic in the bootstrap script.
    Type: String
    AllowedValues:
      - UseMasterELBAddress
      - UseMasterELBName
      - UseClusterName
    Default: 'UseClusterName'

  WhichProxyLBAddress:
    Description: >-
      Selector for the value to use for the proxy load balancer address.  This value is used to drive scripting logic in the bootstrap script.
    Type: String
    AllowedValues:
      - UseProxyELBAddress
      - UseProxyELBName
      - UsePrimaryAppDomain
    Default: 'UsePrimaryAppDomain'

  WorkerNodeCount:
    Description: >-
      Number of worker nodes (desired capacity) to be deployed in the ICP cluster.
    Type: Number
    Default: 2

  WorkerNodeInstanceType:
    Description: ICP Worker node AWS EC2 instance type
    Type: String
    Default: m5.xlarge
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type.


Resources:

  IBMCloudPrivateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      InstanceTenancy: default
      # Enabling DNS is required to resolve host names.
      # The VPC DNS will include all hosts in its CidrBlock
      # The VPC DNS is not to be confused with the Route53 DNS service.
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VPCName
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: !Sub kubernetes.io/cluster/${AWS::StackName}
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway
        - Key: Owner
          Value: !Ref ResourceOwner
        - Key: !Sub kubernetes.io/cluster/${AWS::StackName}
          Value: !Ref AWS::StackName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref IBMCloudPrivateVPC
      InternetGatewayId: !Ref InternetGateway

  ClusterHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: >-
          Private hosted zone for use by the deployed IBM Cloud Private cluster.
      Name: !Ref VPCDomain
      VPCs:
        - VPCId: !Ref IBMCloudPrivateVPC
          VPCRegion: !Ref AWS::Region
      HostedZoneTags:
        - Key: Owner
          Value: !Ref ResourceOwner

  ClusterDNSEntries:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: DNS entries for the deployed ICP cluster
      HostedZoneId: !Ref ClusterHostedZone
      RecordSets:
        # DNS entry to map clustername.VPCDomain
        # to the master node ELB public DNS name.
        # TODO: This may need to be the value of ClusterCADomain.
        # Need to investigate further.  Talk to Jeff Kwong.
        - Name: !Join ['.', [!Ref ClusterName, !Ref VPCDomain]]
          AliasTarget:
            DNSName: !GetAtt MasterNodeStack.Outputs.MasterNodeLoadBalancerDNSName
            HostedZoneId: !GetAtt MasterNodeStack.Outputs.MasterNodeLoadBalancerHostedZoneID
          Type: A
        # DNS entry to map application domain
        # to the proxy node ELB public DNS name.
        # Only the first domain in the ApplicationDomains list is added here.
        # The remaining names in the ApplicationDomains parameter are added
        # in the bootstrap script.
        - Name: !Select [0, !Split [',', !Ref ApplicationDomains]]
          AliasTarget:
            DNSName: !GetAtt ProxyNodeStack.Outputs.ProxyNodeLoadBalancerDNSName
            HostedZoneId: !GetAtt ProxyNodeStack.Outputs.ProxyNodeLoadBalancerHostedZoneID
          Type: A


  PublicSubnetStack:
    Type: AWS::CloudFormation::Stack
    # The public subnet route defined in this stack depends on the
    # InternetGatewayAttachment being defined.
    DependsOn: InternetGatewayAttachment
    Properties:
      TemplateURL: !Sub
        - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/50-icp-public-subnets.yaml
        - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        AvailabilityZoneCount: !Ref AvailabilityZoneCount
        AvailabilityZones: !Ref AvailabilityZones
        IBMCloudPrivateVPC: !Ref IBMCloudPrivateVPC
        InternetGateway: !Ref InternetGateway
        PublicSubnets: !Ref PublicSubnets
        ResourceOwner: !Ref ResourceOwner
        RootStackName: !Ref AWS::StackName


  PrivateSubnetStack:
    DependsOn: InternetGatewayAttachment
    # The NAT EIPs and NAT gateways defined in this stack depend on the
    # InternetGatewayAttachment being defined.
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/51-icp-private-subnets.yaml
        - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        AvailabilityZoneCount: !Ref AvailabilityZoneCount
        AvailabilityZones: !Ref AvailabilityZones
        IBMCloudPrivateVPC: !Ref IBMCloudPrivateVPC
        PublicSubnetIds: !GetAtt PublicSubnetStack.Outputs.PublicSubnetIds
        PrivateSubnets: !Ref PrivateSubnets
        ResourceOwner: !Ref ResourceOwner
        RootStackName: !Ref AWS::StackName


  IAMResources:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/99-ibm-cloud-private-iam-security.yaml
        - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        ClusterPKIBucketName: !Ref ClusterPKIBucketName
        ExternalSSHLocation: !Ref ExternalSSHLocation
        IBMCloudPrivateVPC: !Ref IBMCloudPrivateVPC
        ICPArchiveBucketName: !Sub ${ICPArchiveBucketRootName}-${AWS::Region}
        ICPScriptBucketName: !Ref QSS3BucketName
        ICPDeploymentLogsBucketName: !Ref ICPDeploymentLogsBucketName
        PrivateSubnetCIDR: !Ref PrivateSubnetCIDR
        PublicSubnetCIDR: !Ref PublicSubnetCIDR
        ResourceOwner: !Ref ResourceOwner


  ClusterSharedStorage:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/98-ibm-cloud-private-shared-storage.yaml
        - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        AvailabilityZoneCount: !Ref AvailabilityZoneCount
        PrivateSubnetIds: !GetAtt PrivateSubnetStack.Outputs.PrivateSubnetIds
        PrivateSubnetCIDR: !Ref PrivateSubnetCIDR
        IBMCloudPrivateVPC: !Ref IBMCloudPrivateVPC
        ResourceOwner: !Ref ResourceOwner


  BootNodeStack:
    Type: AWS::CloudFormation::Stack
    # Bootstrap script has code in it that waits for root stack state
    # to be CREATE_COMPLETE because it needs the stack IDs held in the
    # root stack Outputs.
    Properties:
      TemplateURL: !Sub
        - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/01-ibm-cloud-private-boot.yaml
        - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        ApplicationDomains: !Ref ApplicationDomains
        ApplicationStorageMountPoint: !Ref ApplicationStorageMountPoint
        AvailabilityZones: !Ref AvailabilityZones
        BootNodeInstanceType: !Ref BootNodeInstanceType
        BootNodeProfile: !GetAtt IAMResources.Outputs.BootNodeProfile
        BootNodeRole: !GetAtt IAMResources.Outputs.BootNodeRole
        ClusterCADomain: !Ref ClusterCADomain
        ClusterCIDR: !Ref ClusterCIDR
        ClusterDNSName: !Join ['.', [!Ref ClusterName, !Ref VPCDomain]]
        ClusterDomain: !Ref ClusterDomain
        ClusterHostedZoneId: !Ref ClusterHostedZone
        ClusterName: !Ref ClusterName
        ClusterPKIBucketName: !Ref ClusterPKIBucketName
        ClusterPKIRootPath: !Ref ClusterPKIRootPath
        CustomArtifactsPath: !Ref CustomArtifactsPath
        EFSDNSName: !GetAtt ClusterSharedStorage.Outputs.EFSDNSName
        EFSFileSystemId: !GetAtt ClusterSharedStorage.Outputs.EFSFileSystemId
        ExcludedMgmtServices: !Ref ExcludedMgmtServices
        ExternalSSHSecurityGroup: !GetAtt IAMResources.Outputs.ExternalSSHSecurityGroup
        ICPBootNodeScriptPackagePath: !Ref ICPBootNodeScriptPackagePath
        ICPDeploymentLogsBucketName: !Ref ICPDeploymentLogsBucketName
        ICPS3KeyPrefix: !Ref QSS3KeyPrefix
        ICPScriptBucketName: !Ref QSS3BucketName
        ICPVersion: !Ref ICPVersion
        InceptionTimeout: !Ref InceptionTimeout
        InstallationCompletedURL: !Ref InstallationCompletedHandle
        InternalSSHSecurityGroup: !GetAtt IAMResources.Outputs.InternalSSHSecurityGroup
        KeyFilePath: !Ref KeyFilePath
        KeyName: !Ref KeyName
        MasterNodeCount: !Ref MasterNodeCount
        ProxyELBHostedZoneID: !GetAtt ProxyNodeStack.Outputs.ProxyNodeLoadBalancerHostedZoneID
        WhichClusterLBAddress: !Ref WhichClusterLBAddress
        WhichProxyLBAddress: !Ref WhichProxyLBAddress
        ProxyNodeLoadBalancerName: !GetAtt ProxyNodeStack.Outputs.ProxyNodeLoadBalancerDNSName
        PublicSubnetIds: !GetAtt PublicSubnetStack.Outputs.PublicSubnetIds
        ResourceOwner: !Ref ResourceOwner
        RootStackName: !Ref AWS::StackName
        ServiceCIDR: !Ref ServiceCIDR
        # Bootstrap script expects root stack ID in position 0 of StackIds
        StackIds: !Join
          - ','
          - - !Ref AWS::StackId
            - !GetAtt IAMResources.Outputs.StackId
            - !GetAtt MasterNodeStack.Outputs.StackId
            - !GetAtt ManagementNodeStack.Outputs.StackId
            - !GetAtt ProxyNodeStack.Outputs.StackId
            - !GetAtt WorkerNodeStack.Outputs.StackId
        VPCDomain: !Ref VPCDomain

  MasterNodeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
         - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/02-ibm-cloud-private-master.yaml
         - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        AvailabilityZoneCount: !Ref AvailabilityZoneCount
        AvailabilityZones: !Ref AvailabilityZones
        EFSDNSName: !GetAtt ClusterSharedStorage.Outputs.EFSDNSName
        ExternalSSHSecurityGroup: !GetAtt IAMResources.Outputs.ExternalSSHSecurityGroup
        IBMCloudPrivateVPC: !Ref IBMCloudPrivateVPC
        ICPClusterNodeScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath
        ICPDeploymentLogsBucketName: !Ref ICPDeploymentLogsBucketName
        ICPMasterSecurityGroup: !GetAtt IAMResources.Outputs.ICPMasterSecurityGroup
        ICPS3KeyPrefix: !Ref QSS3KeyPrefix
        ICPScriptBucketName: !Ref QSS3BucketName
        ICPVersion: !Ref ICPVersion
        InternalICPSecurityGroup: !GetAtt IAMResources.Outputs.InternalICPSecurityGroup
        InternalSSHSecurityGroup: !GetAtt IAMResources.Outputs.InternalSSHSecurityGroup
        KeyName: !Ref KeyName
        MasterNodeCount: !Ref MasterNodeCount
        MasterNodeInstanceType: !Ref MasterNodeInstanceType
        MasterNodeProfile: !GetAtt IAMResources.Outputs.MasterNodeProfile
        MasterNodeRole: !GetAtt IAMResources.Outputs.MasterNodeRole
        PrivateSubnetIds: !GetAtt PrivateSubnetStack.Outputs.PrivateSubnetIds
        PublicSubnetIds: !GetAtt PublicSubnetStack.Outputs.PublicSubnetIds
        ResourceOwner: !Ref ResourceOwner
        RootStackName: !Ref AWS::StackName

  ManagementNodeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
         - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/03-ibm-cloud-private-mgmt.yaml
         - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        AvailabilityZoneCount: !Ref AvailabilityZoneCount
        AvailabilityZones: !Ref AvailabilityZones
        ICPClusterNodeScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath
        ICPDeploymentLogsBucketName: !Ref ICPDeploymentLogsBucketName
        ICPNodeProfile: !GetAtt IAMResources.Outputs.ICPNodeProfile
        ICPNodeRole: !GetAtt IAMResources.Outputs.ICPNodeRole
        ICPS3KeyPrefix: !Ref QSS3KeyPrefix
        ICPScriptBucketName: !Ref QSS3BucketName
        ICPVersion: !Ref ICPVersion
        InternalICPSecurityGroup: !GetAtt IAMResources.Outputs.InternalICPSecurityGroup
        InternalSSHSecurityGroup: !GetAtt IAMResources.Outputs.InternalSSHSecurityGroup
        KeyName: !Ref KeyName
        ManagementNodeCount: !Ref ManagementNodeCount
        ManagementNodeInstanceType: !Ref ManagementNodeInstanceType
        PrivateSubnetIds: !GetAtt PrivateSubnetStack.Outputs.PrivateSubnetIds
        ResourceOwner: !Ref ResourceOwner
        RootStackName: !Ref AWS::StackName

  ProxyNodeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
         - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/05-ibm-cloud-private-proxy.yaml
         - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        ApplicationSecurityGroup: !GetAtt IAMResources.Outputs.ApplicationSecurityGroup
        AvailabilityZoneCount: !Ref AvailabilityZoneCount
        AvailabilityZones: !Ref AvailabilityZones
        # ExternalSSHSecurityGroup is used for debugging
        ExternalSSHSecurityGroup: !GetAtt IAMResources.Outputs.ExternalSSHSecurityGroup
        IBMCloudPrivateVPC: !Ref IBMCloudPrivateVPC
        ICPClusterNodeScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath
        ICPDeploymentLogsBucketName: !Ref ICPDeploymentLogsBucketName
        ICPNodeProfile: !GetAtt IAMResources.Outputs.ICPNodeProfile
        ICPNodeRole: !GetAtt IAMResources.Outputs.ICPNodeRole
        ICPS3KeyPrefix: !Ref QSS3KeyPrefix
        ICPScriptBucketName: !Ref QSS3BucketName
        ICPVersion: !Ref ICPVersion
        InternalICPSecurityGroup: !GetAtt IAMResources.Outputs.InternalICPSecurityGroup
        InternalSSHSecurityGroup: !GetAtt IAMResources.Outputs.InternalSSHSecurityGroup
        KeyName: !Ref KeyName
        ProxyNodeCount: !Ref ProxyNodeCount
        ProxyNodeInstanceType: !Ref ProxyNodeInstanceType
        PrivateSubnetIds: !GetAtt PrivateSubnetStack.Outputs.PrivateSubnetIds
        PublicSubnetIds: !GetAtt PublicSubnetStack.Outputs.PublicSubnetIds
        ResourceOwner: !Ref ResourceOwner
        RootStackName: !Ref AWS::StackName


  WorkerNodeStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
         - https://s3.amazonaws.com/${ScriptBucketName}/${KeyPrefix}/templates/06-ibm-cloud-private-worker.yaml
         - { ScriptBucketName: !Ref QSS3BucketName, KeyPrefix: !Ref QSS3KeyPrefix }
      Parameters:
        AvailabilityZoneCount: !Ref AvailabilityZoneCount
        AvailabilityZones: !Ref AvailabilityZones
        ICPClusterNodeScriptPackagePath: !Ref ICPClusterNodeScriptPackagePath
        ICPDeploymentLogsBucketName: !Ref ICPDeploymentLogsBucketName
        ICPNodeProfile: !GetAtt IAMResources.Outputs.ICPNodeProfile
        ICPNodeRole: !GetAtt IAMResources.Outputs.ICPNodeRole
        ICPS3KeyPrefix: !Ref QSS3KeyPrefix
        ICPScriptBucketName: !Ref QSS3BucketName
        ICPVersion: !Ref ICPVersion
        InternalICPSecurityGroup: !GetAtt IAMResources.Outputs.InternalICPSecurityGroup
        InternalSSHSecurityGroup: !GetAtt IAMResources.Outputs.InternalSSHSecurityGroup
        KeyName: !Ref KeyName
        WorkerNodeCount: !Ref WorkerNodeCount
        WorkerNodeInstanceType: !Ref WorkerNodeInstanceType
        PrivateSubnetIds: !GetAtt PrivateSubnetStack.Outputs.PrivateSubnetIds
        ResourceOwner: !Ref ResourceOwner
        RootStackName: !Ref AWS::StackName


  InstallationCompletedHandle:
    Type: AWS::CloudFormation::WaitConditionHandle


  # The wait starts once the BootNodeStack has been created.
  # The bootstrap script that runs on the bootnode stack signals
  # the InstallationCompletedHandle for the wait condition.
  InstallationCompleted:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: BootNodeStack
    Properties:
      Count: 1
      Handle: !Ref InstallationCompletedHandle
      Timeout: !Ref InstallationTimeout


Outputs:
  MasterNodeLoadBalancerName:
    Description: The DNS name of the ICP Master node Elastic Load Balancer.
    Value: !GetAtt MasterNodeStack.Outputs.MasterNodeLoadBalancerDNSName

  ProxyNodeLoadBalancerName:
    Description: The DNS name of the ICP Proxy node Elastic Load Balancer.
    Value: !GetAtt ProxyNodeStack.Outputs.ProxyNodeLoadBalancerDNSName

  EFSDNSName:
    Description: >-
      The public DNS name of the EFS server to be used to configure the Kubernetes EFS provisioner.
    Value: !GetAtt ClusterSharedStorage.Outputs.EFSDNSName

  EFSFileSystemId:
    Description: >-
      EFS file system ID to be used to configure the Kubernetes EFS provisioner.
    Value: !GetAtt ClusterSharedStorage.Outputs.EFSFileSystemId

  EFSAppSharedStorageMountPoint:
    Description: >-
      Mount point to use to configure the Kubernetes EFS provisioner to dynamically allocate application shared storage.
    Value: !Ref ApplicationStorageMountPoint
